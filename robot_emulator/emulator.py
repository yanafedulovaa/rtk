import json
import time
import random
import requests
from datetime import datetime, timezone
import os
import threading
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    init(autoreset=True)
    HAS_COLOR = True
except:
    HAS_COLOR = False


class RobotEmulator:
    def __init__(self, robot_id, api_url):
        self.robot_id = robot_id
        self.api_url = api_url
        self.battery = random.randint(80, 100)
        self.current_zone = chr(ord('A') + random.randint(0, 4))  # A-E
        self.current_row = random.randint(1, 20)
        self.current_shelf = random.randint(1, 10)
        self.scan_count = 0
        self.error_count = 0

        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        self.products = [
            {"id": "TEL-4567", "name": "–†–æ—É—Ç–µ—Ä RT-AC68U"},
            {"id": "TEL-8901", "name": "–ú–æ–¥–µ–º DSL-2640U"},
            {"id": "TEL-2345", "name": "–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä SG-108"},
            {"id": "TEL-6789", "name": "IP-—Ç–µ–ª–µ—Ñ–æ–Ω T46S"},
            {"id": "TEL-3456", "name": "–ö–∞–±–µ–ª—å UTP Cat6"},
            {"id": "TEL-7890", "name": "–ü–∞—Ç—á-–∫–æ—Ä–¥ 2m"},
            {"id": "TEL-5678", "name": "–†–æ—É—Ç–µ—Ä Keenetic"},
            {"id": "TEL-9012", "name": "Switch D-Link 24-port"},
        ]

    def generate_scan_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scanned_products = random.sample(self.products, k=random.randint(1, 2))
        scan_results = []

        for product in scanned_products:
            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ - 10%
            rand = random.random()
            if rand < 0.1:  # 10% —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ
                quantity = random.randint(1, 5)
                status = "CRITICAL"
            elif rand < 0.25:  # 15% —à–∞–Ω—Å –Ω–∏–∑–∫–æ–≥–æ
                quantity = random.randint(6, 15)
                status = "LOW"
            else:  # 75% —à–∞–Ω—Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ
                quantity = random.randint(16, 100)
                status = "OK"

            scan_results.append({
                "product_id": product["id"],
                "product_name": product["name"],
                "quantity": quantity,
                "status": status
            })

        return scan_results

    def move_to_next_location(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–∫–∞—Ü–∏–∏"""
        self.current_shelf += 1
        if self.current_shelf > 10:
            self.current_shelf = 1
            self.current_row += 1
            if self.current_row > 20:
                self.current_row = 1
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–æ–Ω–µ
                self.current_zone = chr(ord(self.current_zone) + 1)
                if ord(self.current_zone) > ord('E'):
                    self.current_zone = 'A'

        # –†–∞—Å—Ö–æ–¥ –±–∞—Ç–∞—Ä–µ–∏
        self.battery -= random.uniform(0.2, 1.0)
        if self.battery < 20:
            self.log("üîå –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥! –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ –∑–∞—Ä—è–¥–∫—É...", "warning")
            time.sleep(2)
            self.battery = 100
            self.log("‚úÖ –ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "success")

    def log(self, message, level="info"):
        """–¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")

        if HAS_COLOR:
            if level == "success":
                print(f"{Fore.GREEN}[{timestamp}] [{self.robot_id}] {message}{Style.RESET_ALL}")
            elif level == "warning":
                print(f"{Fore.YELLOW}[{timestamp}] [{self.robot_id}] {message}{Style.RESET_ALL}")
            elif level == "error":
                print(f"{Fore.RED}[{timestamp}] [{self.robot_id}] {message}{Style.RESET_ALL}")
            elif level == "critical":
                print(f"{Fore.RED}{Style.BRIGHT}[{timestamp}] [{self.robot_id}] üö® {message}{Style.RESET_ALL}")
            else:
                print(f"{Fore.CYAN}[{timestamp}] [{self.robot_id}] {message}{Style.RESET_ALL}")
        else:
            print(f"[{timestamp}] [{self.robot_id}] {message}")

    def send_data(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        scan_results = self.generate_scan_data()

        data = {
            "robot_id": self.robot_id,
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "location": {
                "zone": self.current_zone,
                "row": self.current_row,
                "shelf": self.current_shelf
            },
            "scan_results": scan_results,
            "battery_level": round(self.battery, 1),
        }

        try:
            response = requests.post(
                f"{self.api_url}/api/robots/data/",
                json=data,
                headers={"Content-Type": "application/json"},
                timeout=5
            )

            if response.status_code == 200:
                self.scan_count += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
                critical_items = [s for s in scan_results if s['status'] == 'CRITICAL']
                if critical_items:
                    for item in critical_items:
                        self.log(
                            f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –û–°–¢–ê–¢–û–ö: {item['product_name']} "
                            f"({item['quantity']} —à—Ç.) –≤ –∑–æ–Ω–µ {self.current_zone}{self.current_row}",
                            "critical"
                        )
                else:
                    self.log(
                        f"üì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{self.scan_count} | "
                        f"–ü–æ–∑–∏—Ü–∏—è: {self.current_zone}{self.current_row}-{self.current_shelf} | "
                        f"üîã {round(self.battery)}%",
                        "success"
                    )
            else:
                self.error_count += 1
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}", "error")

        except requests.exceptions.RequestException as e:
            self.error_count += 1
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)[:50]}", "error")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Ä–æ–±–æ—Ç–∞"""
        self.log(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–æ–±–æ—Ç–∞ | –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.current_zone}{self.current_row}", "info")

        while True:
            self.send_data()
            self.move_to_next_location()
            time.sleep(int(os.getenv('UPDATE_INTERVAL', 5)))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥


def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           ü§ñ –≠–ú–£–õ–Ø–¢–û–† –°–ö–õ–ê–î–°–ö–ò–• –†–û–ë–û–¢–û–í ü§ñ              ‚ïë
‚ïë                  Smart Warehouse System                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


def print_stats(robots):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
    while True:
        time.sleep(30)
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´ –†–û–ë–û–¢–û–í:")
        total_scans = sum(r.scan_count for r in robots)
        total_errors = sum(r.error_count for r in robots)
        print(f"  ‚úÖ –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {total_scans}")
        print(f"  ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
        print(f"  ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤: {len(robots)}")
        print("=" * 60 + "\n")


if __name__ == "__main__":
    print_banner()

    api_url = os.getenv('API_URL', 'http://backend:8000')
    robots_count = int(os.getenv('ROBOTS_COUNT', 5))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Ä–æ–±–æ—Ç–æ–≤
    update_interval = int(os.getenv('UPDATE_INTERVAL', 5))  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    print(f"üåê API URL: {api_url}")
    print(f"ü§ñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤: {robots_count}")
    print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_interval} —Å–µ–∫")
    print(f"‚å®Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    print("=" * 60 + "\n")

    # –°–æ–∑–¥–∞–µ–º —Ä–æ–±–æ—Ç–æ–≤
    robots = []
    threads = []

    for i in range(1, robots_count + 1):
        robot = RobotEmulator(f"RB-{i:03d}", api_url)
        robots.append(robot)

        thread = threading.Thread(target=robot.run)
        thread.daemon = True
        thread.start()
        threads.append(thread)

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º —Ä–æ–±–æ—Ç–æ–≤
        time.sleep(0.5)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_thread = threading.Thread(target=print_stats, args=(robots,))
    stats_thread.daemon = True
    stats_thread.start()

    # –î–µ—Ä–∂–∏–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")
        print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚úÖ –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {sum(r.scan_count for r in robots)}")
        print(f"  ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {sum(r.error_count for r in robots)}")
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.\n")