import os
import django
import random
from datetime import timedelta
from django.utils import timezone

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smart_warehouse.settings')
django.setup()

from django.contrib.auth import get_user_model
from products.models import Product
from robots.models import Robot
from warehouse.models import InventoryHistory

User = get_user_model()


def create_initial_data():
    print("üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n")

    # 1. –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    if not User.objects.filter(email='admin@warehouse.com').exists():
        User.objects.create_superuser(
            email='admin@warehouse.com',
            password='admin123'
        )
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin@warehouse.com / admin123")
    else:
        print("‚ÑπÔ∏è  –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    products_data = [
        {"id": "TEL-4567", "name": "–†–æ—É—Ç–µ—Ä RT-AC68U", "category": "–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"},
        {"id": "TEL-8901", "name": "–ú–æ–¥–µ–º DSL-2640U", "category": "–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"},
        {"id": "TEL-2345", "name": "–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä SG-108", "category": "–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"},
        {"id": "TEL-6789", "name": "IP-—Ç–µ–ª–µ—Ñ–æ–Ω T46S", "category": "–¢–µ–ª–µ—Ñ–æ–Ω–∏—è"},
        {"id": "TEL-3456", "name": "–ö–∞–±–µ–ª—å UTP Cat6", "category": "–ö–∞–±–µ–ª–∏"},
        {"id": "TEL-7890", "name": "–ü–∞—Ç—á-–∫–æ—Ä–¥ 2m", "category": "–ö–∞–±–µ–ª–∏"},
        {"id": "TEL-5678", "name": "–†–æ—É—Ç–µ—Ä Keenetic", "category": "–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"},
        {"id": "TEL-9012", "name": "Switch D-Link 24-port", "category": "–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"},
    ]

    created_products = []
    for product_data in products_data:
        product, created = Product.objects.get_or_create(
            id=product_data["id"],
            defaults={
                "name": product_data["name"],
                "category": product_data["category"],
                "min_stock": 20,
                "optimal_stock": 50
            }
        )
        created_products.append(product)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(created_products)}")

    # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–æ–±–æ—Ç–æ–≤
    robots_data = [
        {"id": "RB-001", "battery": 85, "zone": "A", "row": 5},
        {"id": "RB-002", "battery": 92, "zone": "D", "row": 12},
        {"id": "RB-003", "battery": 78, "zone": "H", "row": 20},
        {"id": "RB-004", "battery": 95, "zone": "M", "row": 30},
        {"id": "RB-005", "battery": 88, "zone": "R", "row": 40},
    ]

    created_robots = []
    now = timezone.now()
    for robot_data in robots_data:
        robot, created = Robot.objects.get_or_create(
            id=robot_data["id"],
            defaults={
                "battery_level": robot_data["battery"],
                "current_zone": robot_data["zone"],
                "current_row": robot_data["row"],
                "current_shelf": random.randint(1, 10),
                "status": "active",
                "is_active": True,
                "last_update": now
            }
        )
        created_robots.append(robot)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä–æ–±–æ—Ç–æ–≤: {len(created_robots)}")

    # 4. –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
    zones = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    rows = 50
    now = timezone.now()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ 30% –∫–∞—Ä—Ç—ã)
    cells_to_fill = int(len(zones) * rows * 0.3)  # ~390 —è—á–µ–µ–∫

    scans_created = 0
    for _ in range(cells_to_fill):
        zone = random.choice(zones)
        row = random.randint(1, rows)
        product = random.choice(created_products)
        robot = random.choice(created_robots)

        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ –¥–æ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        hours_ago = random.randint(1, 24 * 30)  # –æ—Ç 1 —á–∞—Å–∞ –¥–æ 30 –¥–Ω–µ–π
        scanned_at = now - timedelta(hours=hours_ago)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        rand = random.random()
        if rand < 0.1:  # 10% - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
            quantity = random.randint(1, 5)
            status = "CRITICAL"
        elif rand < 0.25:  # 15% - –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
            quantity = random.randint(6, 15)
            status = "LOW_STOCK"
        else:  # 75% - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
            quantity = random.randint(16, 100)
            status = "OK"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–æ–ª–µ–µ —Å–≤–µ–∂–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —è—á–µ–π–∫–∏
        existing_scan = InventoryHistory.objects.filter(
            zone=zone,
            row_number=row
        ).order_by('-scanned_at').first()

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–ª–∏ –µ—Å–ª–∏ –Ω–æ–≤–æ–µ —Å–≤–µ–∂–µ–µ
        if not existing_scan or scanned_at > existing_scan.scanned_at:
            InventoryHistory.objects.create(
                robot=robot,
                product=product,
                quantity=quantity,
                zone=zone,
                row_number=row,
                shelf_number=random.randint(1, 10),
                status=status,
                scanned_at=scanned_at
            )
            scans_created += 1

    # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ–∂–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
    for _ in range(50):
        zone = random.choice(zones)
        row = random.randint(1, rows)
        product = random.choice(created_products)
        robot = random.choice(created_robots)

        # –°–≤–µ–∂–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
        minutes_ago = random.randint(1, 60)
        scanned_at = now - timedelta(minutes=minutes_ago)

        quantity = random.randint(20, 100)
        status = "OK"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–µ–∂–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        InventoryHistory.objects.filter(
            zone=zone,
            row_number=row
        ).delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å

        InventoryHistory.objects.create(
            robot=robot,
            product=product,
            quantity=quantity,
            zone=zone,
            row_number=row,
            shelf_number=random.randint(1, 10),
            status=status,
            scanned_at=scanned_at
        )
        scans_created += 1

    print(f"–°–æ–∑–¥–∞–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {scans_created}")
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –ó–æ–Ω—ã —Å –¥–∞–Ω–Ω—ã–º–∏: ~{int(cells_to_fill / rows)} –∑–æ–Ω")
    print(f"   - –Ø—á–µ–µ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ~{cells_to_fill + 50}")
    print(f"   - –°–≤–µ–∂–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å): 50")
    print("\n–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    print("   –ö–∞—Ä—Ç–∞ —Å–∫–ª–∞–¥–∞ –±—É–¥–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞.")


if __name__ == '__main__':
    create_initial_data()