import React, { useState, useEffect, useRef } from "react";

export default function WarehouseMap({ robots = [], recentScans = [] }) {
  const containerRef = useRef(null);

  const [zoneStatus, setZoneStatus] = useState({});
  const [scale, setScale] = useState(1);
  const [offset, setOffset] = useState({ x: 0, y: 0 });
  const [hoveredRobot, setHoveredRobot] = useState(null);
  const [hoveredCell, setHoveredCell] = useState(null);

  const cellWidth = 40;
  const cellHeight = 28;
  const zones = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  const rows = 50;
  const marginLeft = 40;
  const marginTop = 36;

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ props
  useEffect(() => {
    const newZoneData = {};

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    recentScans.forEach(scan => {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–∞–Ω–∞
      const robot = robots.find(r => r.id === scan.robot_id);
      if (!robot || !robot.zone || robot.row == null) return;

      const key = `${robot.zone}${robot.row}`;
      const prev = newZoneData[key];

      const prevTime = prev?.time ? new Date(prev.time) : null;
      const thisTime = scan.time ? new Date(scan.time) : null;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Å–∫–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
      if (!prev || (thisTime && (!prevTime || thisTime > prevTime))) {
        newZoneData[key] = {
          ...scan,
          zone: robot.zone,
          row: robot.row,
        };
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    zones.forEach(zone => {
      for (let r = 1; r <= rows; r++) {
        const key = `${zone}${r}`;
        if (!newZoneData.hasOwnProperty(key)) {
          newZoneData[key] = null;
        }
      }
    });

    setZoneStatus(newZoneData);
  }, [robots, recentScans]);

  // --- –¶–≤–µ—Ç —è—á–µ–π–∫–∏ ---
  const getZoneColor = (cell) => {
    if (!cell) return "#e9ecef"; // –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–µ—Ä—ã–π

    const statusRaw = (cell.status || "").toString().trim().toLowerCase();
    const scannedAt = cell.time ? new Date(cell.time) : null;
    const now = new Date();

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
    if (statusRaw.includes("crit")) return "#f8d7da";

    // –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
    if (statusRaw.includes("low")) return "#fff3cd";

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (!scannedAt) return "#fff3cd";

    // –ï—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
    if (now - scannedAt > 60 * 60 * 1000) return "#fff3cd";

    // –í—Å–µ —Ö–æ—Ä–æ—à–æ
    return "#d4edda";
  };

  // --- –¶–≤–µ—Ç —Ä–æ–±–æ—Ç–∞ ---
  const robotColor = (status, battery) => {
    const s = (status || "").toLowerCase();
    if (s.includes("offline") || s.includes("off")) return "#dc3545"; // –∫—Ä–∞—Å–Ω—ã–π
    if (typeof battery === "number" && battery < 50) return "#ffc107"; // –∂–µ–ª—Ç—ã–π
    return "#28a745"; // –∑–µ–ª–µ–Ω—ã–π
  };

  const handleZoomIn = () => setScale((s) => Math.min(s + 0.2, 3));
  const handleZoomOut = () => setScale((s) => Math.max(s - 0.2, 0.5));
  const handleCenter = () => {
    if (containerRef.current) {
      containerRef.current.scrollTop = 0;
      containerRef.current.scrollLeft = 0;
    }
    setOffset({ x: 0, y: 0 });
  };

  const svgWidth = zones.length * cellWidth + marginLeft + 20;
  const svgHeight = rows * cellHeight + marginTop + 20;

  const getTooltipPos = (clientX, clientY) => {
    return { left: clientX + 10, top: clientY + 10 };
  };

  return (
    <div style={{ padding: 12, position: "relative" }}>
      <h2 style={{ fontSize: 18, marginBottom: 12 }}>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–∫–ª–∞–¥–∞</h2>
      <div style={{ marginBottom: 10 }}>
        <button onClick={handleZoomIn} style={buttonStyle}>+</button>
        <button onClick={handleZoomOut} style={buttonStyle}>‚àí</button>
        <button onClick={handleCenter} style={buttonGrayStyle}>–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
        <span style={{ marginLeft: 15, fontSize: 12, color: "#666" }}>
          –†–æ–±–æ—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: {robots.length}
        </span>
      </div>

      <div
        ref={containerRef}
        style={{
          overflow: "auto",
          border: "1px solid #ddd",
          borderRadius: 8,
          width: "100%",
          height: "72vh",
          background: "#fff",
        }}
      >
        <svg
          width={svgWidth * scale}
          height={svgHeight * scale}
          viewBox={`0 0 ${svgWidth} ${svgHeight}`}
          preserveAspectRatio="xMinYMin meet"
        >
          <g transform={`translate(${marginLeft + offset.x}, ${marginTop + offset.y})`}>
            {/* –°–µ—Ç–∫–∞ —è—á–µ–µ–∫ */}
            {zones.map((zone, colIdx) =>
              Array.from({ length: rows }).map((_, rowIdx) => {
                const cellId = `${zone}${rowIdx + 1}`;
                const cell = zoneStatus[cellId];
                return (
                  <rect
                    key={cellId}
                    x={colIdx * cellWidth}
                    y={rowIdx * cellHeight}
                    width={cellWidth}
                    height={cellHeight}
                    fill={getZoneColor(cell)}
                    stroke="#cfcfcf"
                    strokeWidth={0.5}
                    onMouseEnter={(e) => setHoveredCell({
                      id: cellId,
                      x: e.clientX,
                      y: e.clientY,
                      cell
                    })}
                    onMouseLeave={() => setHoveredCell(null)}
                    style={{ cursor: 'pointer' }}
                  />
                );
              })
            )}

            {/* –ü–æ–¥–ø–∏—Å–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–∑–æ–Ω—ã A-Z) */}
            {zones.map((zone, i) => (
              <text
                key={`col-${zone}`}
                x={i * cellWidth + cellWidth / 2}
                y={-8}
                fontSize={12}
                fontWeight="bold"
                textAnchor="middle"
                fill="#333"
              >
                {zone}
              </text>
            ))}

            {/* –ü–æ–¥–ø–∏—Å–∏ —Ä—è–¥–æ–≤ (1-50) */}
            {Array.from({ length: rows }).map((_, j) => (
              <text
                key={`row-label-${j + 1}`}
                x={-10}
                y={j * cellHeight + cellHeight / 2 + 4}
                fontSize={12}
                fontWeight="bold"
                textAnchor="end"
                fill="#333"
              >
                {j + 1}
              </text>
            ))}

            {/* –†–æ–±–æ—Ç—ã */}
            {robots.map((robot) => {
              const zoneStr = (robot.zone || "").toString().toUpperCase();
              const zoneIndex = zones.indexOf(zoneStr);
              const rowNum = Number(robot.row);

              if (zoneIndex === -1 || !rowNum || rowNum < 1 || rowNum > rows) {
                console.warn(`Robot ${robot.id} has invalid position: ${zoneStr}${rowNum}`);
                return null;
              }

              const x = zoneIndex * cellWidth + cellWidth / 2;
              const y = (rowNum - 1) * cellHeight + cellHeight / 2;
              const color = robotColor(robot.status, robot.battery);

              return (
                <g
                  key={robot.id}
                  cursor="pointer"
                  onMouseEnter={(e) => setHoveredRobot({
                    ...robot,
                    x: e.clientX,
                    y: e.clientY
                  })}
                  onMouseLeave={() => setHoveredRobot(null)}
                >
                  {/* –ö—Ä—É–≥ —Ä–æ–±–æ—Ç–∞ */}
                  <circle
                    cx={x}
                    cy={y}
                    r={9}
                    fill={color}
                    stroke="#222"
                    strokeWidth={0.8}
                  />
                  {/* ID —Ä–æ–±–æ—Ç–∞ */}
                  <text
                    x={x}
                    y={y + 4}
                    fontSize={9}
                    fill="#fff"
                    textAnchor="middle"
                    fontWeight="bold"
                  >
                    {String(robot.id).replace(/^RB-/, "")}
                  </text>
                </g>
              );
            })}
          </g>
        </svg>
      </div>

      {/* Tooltip —Ä–æ–±–æ—Ç–∞ */}
      {hoveredRobot && (
        (() => {
          const pos = getTooltipPos(hoveredRobot.x, hoveredRobot.y);
          return (
            <div style={{ ...tooltipStyle(pos.left, pos.top) }}>
              <div style={{ fontWeight: "bold", marginBottom: 5 }}>
                ü§ñ –†–æ–±–æ—Ç {hoveredRobot.id}
              </div>
              <div style={{ fontSize: 12 }}>
                üîã –ë–∞—Ç–∞—Ä–µ—è: {hoveredRobot.battery}%
              </div>
              <div style={{ fontSize: 12 }}>
                üìç –ü–æ–∑–∏—Ü–∏—è: {hoveredRobot.zone}{hoveredRobot.row}
              </div>
              <div style={{ fontSize: 12 }}>
                ‚ö° –°—Ç–∞—Ç—É—Å: {hoveredRobot.status}
              </div>
              {hoveredRobot.last_update && (
                <div style={{ fontSize: 11, color: "#666", marginTop: 3 }}>
                  üïê {new Date(hoveredRobot.last_update).toLocaleString()}
                </div>
              )}
            </div>
          );
        })()
      )}

      {/* Tooltip —è—á–µ–π–∫–∏ */}
      {hoveredCell && (
        (() => {
          const pos = getTooltipPos(hoveredCell.x, hoveredCell.y);
          const sc = hoveredCell.cell;
          return (
            <div style={{ ...tooltipStyle(pos.left, pos.top) }}>
              <div style={{ fontWeight: "bold", marginBottom: 5 }}>
                üì¶ –ó–æ–Ω–∞ {hoveredCell.id}
              </div>
              {sc ? (
                <>
                  <div style={{ fontSize: 12 }}>
                    üìä –°—Ç–∞—Ç—É—Å: {sc.status || "OK"}
                  </div>
                  {sc.product && (
                    <div style={{ fontSize: 12 }}>
                      üì¶ –¢–æ–≤–∞—Ä: {sc.product}
                    </div>
                  )}
                  {sc.quantity != null && (
                    <div style={{ fontSize: 12 }}>
                      üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {sc.quantity}
                    </div>
                  )}
                  <div style={{ fontSize: 11, color: "#666", marginTop: 3 }}>
                    üïê {sc.time ? new Date(sc.time).toLocaleString() : "‚Äî"}
                  </div>
                </>
              ) : (
                <div style={{ fontSize: 12, color: "#999" }}>
                  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                </div>
              )}
            </div>
          );
        })()
      )}

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div style={legendStyle}>
        <div style={{ fontWeight: "bold", marginBottom: 8, fontSize: 13 }}>
          –õ–µ–≥–µ–Ω–¥–∞:
        </div>
        <div style={legendItemStyle}>
          <div style={{ ...legendColorBox, backgroundColor: "#d4edda" }} />
          <span>–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ</span>
        </div>
        <div style={legendItemStyle}>
          <div style={{ ...legendColorBox, backgroundColor: "#fff3cd" }} />
          <span>–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</span>
        </div>
        <div style={legendItemStyle}>
          <div style={{ ...legendColorBox, backgroundColor: "#f8d7da" }} />
          <span>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫</span>
        </div>
        <div style={legendItemStyle}>
          <div style={{ ...legendColorBox, backgroundColor: "#e9ecef" }} />
          <span>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>
        </div>
        <div style={{ borderTop: "1px solid #ddd", marginTop: 8, paddingTop: 8 }}>
          <div style={legendItemStyle}>
            <div style={{ ...legendColorCircle, backgroundColor: "#28a745" }} />
            <span>–†–æ–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω</span>
          </div>
          <div style={legendItemStyle}>
            <div style={{ ...legendColorCircle, backgroundColor: "#ffc107" }} />
            <span>–ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥</span>
          </div>
          <div style={legendItemStyle}>
            <div style={{ ...legendColorCircle, backgroundColor: "#dc3545" }} />
            <span>–†–æ–±–æ—Ç offline</span>
          </div>
        </div>
      </div>
    </div>
  );
}

// === –°—Ç–∏–ª–∏ ===
const buttonStyle = {
  padding: "6px 10px",
  marginRight: 8,
  backgroundColor: "#007bff",
  color: "#fff",
  border: "none",
  borderRadius: 6,
  cursor: "pointer",
  fontSize: 13,
  fontWeight: "500",
};

const buttonGrayStyle = {
  padding: "6px 10px",
  marginRight: 8,
  backgroundColor: "#6c757d",
  color: "#fff",
  border: "none",
  borderRadius: 6,
  cursor: "pointer",
  fontSize: 13,
  fontWeight: "500",
};

const tooltipStyle = (left, top) => ({
  position: "fixed",
  left,
  top,
  background: "#fff",
  border: "1px solid #ccc",
  borderRadius: 8,
  padding: "10px 12px",
  fontSize: 13,
  pointerEvents: "none",
  zIndex: 2000,
  boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
  minWidth: 180,
});

const legendStyle = {
  position: "absolute",
  top: 60,
  right: 20,
  background: "white",
  border: "1px solid #ddd",
  borderRadius: 8,
  padding: 12,
  fontSize: 12,
  boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
  zIndex: 100,
};

const legendItemStyle = {
  display: "flex",
  alignItems: "center",
  marginBottom: 6,
  gap: 8,
};

const legendColorBox = {
  width: 20,
  height: 14,
  border: "1px solid #999",
  borderRadius: 3,
};

const legendColorCircle = {
  width: 12,
  height: 12,
  borderRadius: "50%",
  border: "1px solid #666",
};